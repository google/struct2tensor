[build-system]
requires = [
  "setuptools",
  "wheel",
]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8 naming
    "N",
    # pydocstyle
    "D",
    # annotations
    "ANN",
    # debugger
    "T10",
    # flake8-pytest
    "PT",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-fixme
    "FIX",
    # flake8-eradicate
    "ERA",
    # pandas-vet
    "PD",
    # numpy-specific rules
    "NPY",
]
ignore = [
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self`
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function (makes no sense for NoneType return types...)
    "ANN204", # Missing return type annotation for special method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D203", # 1 blank line before after class docstring
    "D204", # 1 blank line required after class docstring
    "D206", # Advised to disable by ruff-format
    "D211", # No blank line before class
    "D213", # Multiline summary second line
    "D413", # 1 blank line after parameters
    "E501", # Advised to disable by ruff-format
    "N802", # Function name should be lowercase; unittest uses mixed case
    "PD901", # Avoid using 'df' for pandas dataframes. Perfectly fine in functions with limited scope
    "SIM108", # Simplify if/else to one line; not always clearer
    "W191", # Advised to disable by ruff-format

    # These are issues which remain to be fixed
    "ANN001", # Missing type annotation for function argument
    "ANN202", # Missing return type for private function
    "ANN206", # Missing return type annotation for classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ARG002", # Unused method argument
    "B007", # Loop control variable not used within loop body
    "B008", # Do not perform function call in argument defaults
    "B018", # Found useless expression
    "B024", # <class> is an abstract base class,  but it has no abstract methods
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D200", # One-line docstring should fit on one line
    "D401", # First line of docstring should be in imperative mood
    "D404", # First word of the docstring should not be "This"
    "E721", # Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
    "ERA001", # Dead code
    "FIX002", # Line contains TODO, consider resolving the issue
    "PD011", # Use `.to_numpy()` instead of `.values`
    "PD013", # `.melt` is preferred to `.stack`
    "RET504", # Unncessary assignment before `return`
    "RET505", # Unncessary `else` after `return` statement
    "SIM101", # Multiple `isinstance` calls, merge into a single call
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM105", # Replace with `contextlib.suppress(FileNotFoundError)`
    "SIM110", # Use `return all(...)` instead of `for` loop
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    "UP008", # Use `super()` instead of `super(__class__, self)`
    "UP031", # Use format specifiers instead of percent format
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused import
]
"*_test.py" = [
    "ANN001", # Type annotations aren't needed for tests; these are fixtures or parametrizations
    "PT009", # Use a regular `assert` instead of a unittest-style `assertEqual`
    "PT027", # Use `pytest.raises` instead of unittest-style `assertRaisesRegex`

    # Missing docstrings; probably want to fill these out for tests. For now, we just disable
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method

]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
profile = "black"
